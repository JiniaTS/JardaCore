/*########################
# Jarda WoW (c)  		 #
#########################*/

#include "ScriptPCH.h"
#include "stone_core.h"
#include "ScriptedCreature.h"


emun Spells
{

	SPELL_BERSERKER_CHARGE               =76030
	SPELL_FLAMEBREAK                     =76032
	SPELL_MAGMA_SPIT                     =76031
	SPELL_TERRIFYNG_ROAR                 =76028
	SPELL_BERSERK                        =82395
	//Trash
	SPELL_LAVA_DROOL                     =76628
	SPELL_LITTLE_BIG FLAME_BREATH        =76665  


}

/*########################
# Boss Beauty			 #
#########################*/

class boss_beauty : public CreatureScript
{
public:
	boss_corbosus() : CreatureScript("boss_beauty") {}

	CreatureAI* GetAI(Creature* creature) const
	{
		return new boss_beautyAI(creature);
	}

	struct boss_beautyAI : public BossAI
	{
		boss_beautyAI(Creature* creature) : BossAI(creature, BOSS_BEAUT, summons(creature), phase(PHASE_NULL) {}

		EventMap events;


		void Reset()
		{
			me->SetVisible(true);
			phase = PHASE_NULL;
			events.SetPhase(PHASE_NULL);
		}

		void EnterCombat(Unit* /*who*/)
		{
			events.ScheduleEvent(EVENT_BERSERKER_CHARGE, 15000,0,);
			events.ScheduleEvent(EVENT_FLAMEBREAK, 25000, 0,);
			events.ScheduleEvent(EVENT_MAGMA_SPIT, 33000,);
			events.ScheduleEvent(EVENT_TERRIFYNG_ROAR, 25000, 0,);
			events.ScheduleEvent(EVENT_BERSERK, 900000, 0,);
			DoZoneInCombat();
		}
		void UpdateAI(uint32 diff)
		{
			if(!UpdateVictim())
				return;

			events.Update(diff);

			if(phase == PHASE_NULL)
			{

			while(uint32 eventID = events.ExecuteEvent())
			{
				switch(eventID)
				{
				case BERSERKER_CHARGE:
					if(Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
						if(!IsHeroic())
							DoCast(target, BERSERKER_CHARGE);
						else 
							DoCast(target, BERSERKER_CHARGE);
					events.RescheduleEvent(BERSERKER_CHARGE, 12000, 0, PHASE_NULL);
					break;

				case FLAMEBREAK:
					if(Unit* target = Target)
						else 
							DoCast(target, FLAMEBREAK);
					events.RescheduleEvent(FLAMEBREAK, 12000, 0, PHASE_NULL);
					break;

				case MAGMA_SPIT:
					if(Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
						else 
							DoCast(target, MAGMA_SPIT);
					events.RescheduleEvent(MAGMA_SPIT, 12000, 0, PHASE_NULL);
					break;

					case TERRIFYNG_ROAR:
					if(Unit* target = Target)
						else 
							DoCast(target, TERRIFYNG_ROAR);
					events.RescheduleEvent(TERRIFYNG_ROAR, 12000, 0, PHASE_NULL);
					break;
				
				}
			}

			DoMeleeAttackIfReady();
			}
/*########################
# Psi	 #
#########################*/

class npc_buster : public CreatureScript
	{
	public:
		npc_buster() : CreatureScript("npc_buster") {}

		CreatureAI* GetAI(Creature* creature) const
		{
			return new npc_busterAI(creature);
		}
		struct npc_busterAI : BossAI
		{
			npc_busterAI(Creature* creature) : BossAI(creature, BOSS_BEAUTY), phase(PHASE_NULL) {}

			EventMap events;
			Phases phase;

			void Reset()
			{
				_Reset();
			}

			void EnterCombat(Unit* /*who*/)
			{
				events.ScheduleEvent(EVENT_LAVA_DROOL, 10000);
				events.ScheduleEvent(EVENT_LITTLE_BIG FLAME_BREATH, 12000);
				DoZoneInCombat();
			
		void UpdateAI(uint32 diff)
		{
			if(!UpdateVictim())
				return;

			events.Update(diff);

			if(phase == PHASE_NULL)
			{

			while(uint32 eventID = events.ExecuteEvent())
			{
				switch(eventID)
				{
				case LAVA_DROOL:
					if(Unit* target = Target)
						
						else 
							DoCast(target, LAVA_DROOL);
					events.RescheduleEvent(LAVA_DROOL, 12000, 0, PHASE_NULL);
					break;

				case LITTLE_BIG FLAME_BREATH:
					if(Unit* target = Target)
						else 
							DoCast(target, LITTLE_BIG FLAME_BREATH);
					events.RescheduleEvent(LITTLE_BIG FLAME_BREATH, 12000, 0, PHASE_NULL);
					break;
			};
				DoMeleeAttackIfReady();
			}

class npc_buster : public CreatureScript
	{
	public:
		npc_buster() : CreatureScript("npc_buster") {}

		CreatureAI* GetAI(Creature* creature) const
		{
			return new npc_busterAI(creature);
		}
		struct npc_busterAI : BossAI
		{
			npc_busterAI(Creature* creature) : BossAI(creature, BOSS_BEAUTY), phase(PHASE_NULL) {}

			EventMap events;
			Phases phase;

			void Reset()
			{
				_Reset();
			}

			void EnterCombat(Unit* /*who*/)
			{
				events.ScheduleEvent(EVENT_LAVA_DROOL, 10000);
				events.ScheduleEvent(EVENT_LITTLE_BIG FLAME_BREATH, 12000);
				DoZoneInCombat();
			}

		void UpdateAI(uint32 diff)
		{
			if(!UpdateVictim())
				return;

			events.Update(diff);

			if(phase == PHASE_NULL)
			{

			while(uint32 eventID = events.ExecuteEvent())
			{
				switch(eventID)
				{
				case LAVA_DROOL:
					if(Unit* target = Target)
						
						else 
							DoCast(target, LAVA_DROOL);
					events.RescheduleEvent(LAVA_DROOL, 12000, 0, PHASE_NULL);
					break;

				case LITTLE_BIG FLAME_BREATH:
					if(Unit* target = Target)
						else 
							DoCast(target, LITTLE_BIG FLAME_BREATH);
					events.RescheduleEvent(LITTLE_BIG FLAME_BREATH, 12000, 0, PHASE_NULL);
					break;
			};
				DoMeleeAttackIfReady();
			}


class npc_spot : public CreatureScript
	{
	public:
		npc_spot() : CreatureScript("npc_spot") {}

		CreatureAI* GetAI(Creature* creature) const
		{
			return new npc_spotAI(creature);
		}
		struct npc_spotAI : BossAI
		{
			npc_spotAI(Creature* creature) : BossAI(creature, BOSS_BEAUTY), phase(PHASE_NULL) {}

			EventMap events;
			Phases phase;

			void Reset()
			{
				_Reset();
			}

			void EnterCombat(Unit* /*who*/)
			{
				events.ScheduleEvent(EVENT_LAVA_DROOL, 10000);
				events.ScheduleEvent(EVENT_LITTLE_BIG FLAME_BREATH, 12000);
				DoZoneInCombat();
			}
					void UpdateAI(uint32 diff)
		{
			if(!UpdateVictim())
				return;

			events.Update(diff);

			if(phase == PHASE_NULL)
			{

			while(uint32 eventID = events.ExecuteEvent())
			{
				switch(eventID)
				{
				case LAVA_DROOL:
					if(Unit* target = Target)
						
						else 
							DoCast(target, LAVA_DROOL);
					events.RescheduleEvent(LAVA_DROOL, 12000, 0, PHASE_NULL);
					break;

				case LITTLE_BIG FLAME_BREATH:
					if(Unit* target = Target)
						else 
							DoCast(target, LITTLE_BIG FLAME_BREATH);
					events.RescheduleEvent(LITTLE_BIG FLAME_BREATH, 12000, 0, PHASE_NULL);
					break;
			};
				DoMeleeAttackIfReady();
			}
		};
